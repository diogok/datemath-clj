(ns datemath.core-test
  (:use datemath.core)
  (:use clojure.test)
  (:require [java-time :as t]))

(deftest test-parser
  (is (= (text-to-parts "now +1d/d-25s /M")
         ["now" "+1d" "/d"  "-25s" "/M"])))

(deftest datetime-strings
  (let [date (t/as-map (from-string "2019-01-02T00:00:23Z"))]
    (is (= (:year date) 2019))
    (is (= (:month-of-year date) 1))
    (is (= (:day-of-month date) 2))
    (is (= (:second-of-minute date) 23)))
  (let [date (t/zoned-date-time 2019 1 2 0 0 23 0 (t/zone-id "Z"))]
    (is (= "2019-01-02T00:00:23Z" (to-string date)))))

(deftest now-or-datestring
  (t/with-clock (t/mock-clock 0 "Z")
    (is (= (calc-date "now+1d")
           (t/plus (now) (t/days 1))))
    (is (= (calc-date "1970-01-01T00:00:00Z||+1d")
           (t/plus (now) (t/days 1))))
    (is (= (calc-date "now+2d/w")
           (calc-date "1970-01-01T00:00:00Z||+2d/w")))
    ))

(deftest basic-convertions
  (t/with-clock (t/mock-clock 0 "UTC")
    (is (= (calc-date "now+1d")
            (t/plus (now) (t/days 1))))
    (is (= (calc-date "now+23d")
            (t/plus (now) (t/days 23))))
    (is (= (calc-date "now+23d -2s -3d +1w")
            (-> (now)
                (t/plus  (t/days 23))
                (t/minus (t/seconds 2))
                (t/minus (t/days 3))
                (t/plus  (t/weeks 1)))))
    (is (= (calc-date "now +1y")
            (t/plus (now) (t/years 1))))
    (is (= (calc-date "now/m")
            (t/truncate-to (now) :minutes)))
    (is (= (calc-date "now/h")
            (t/truncate-to (now) :hours)))
    (is (= (calc-date "now/d")
            (t/truncate-to (now) :days)))
    (is (= (calc-date "now/w")
            (t/adjust (now) first-day-of-week-adjuster)))
    (is (= (calc-date "now/M")
            (t/adjust (now) :first-day-of-month)))
    (is (= (calc-date "now/y")
            (t/adjust (now) :first-day-of-year)))
    (is (= (calc-date "now +23d/w +1w")
            (-> (now)
                (t/plus (t/days 23))
                (t/adjust first-day-of-week-adjuster)
                (t/plus (t/weeks 1)))))
    ))